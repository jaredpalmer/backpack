#! /usr/bin/env node
const webpack = require('webpack')
const defaultConfig = require('../config/webpack.config')
const path = require('path')
const fs = require('fs')

process.on('SIGINT', process.exit)

const options = {
  env: process.env.NODE_ENV || 'production'
}

const configPath = path.resolve('backpack.config.js')
let userConfig = {}

if (fs.existsSync(configPath)) {
  const userConfigModule = require(configPath)
  userConfig = userConfigModule.default || userConfigModule
}

const serverConfig = userConfig.webpack
      ? userConfig.webpack(defaultConfig(options), options, webpack)
      : defaultConfig(options)

process.on('SIGINT', process.exit)

// If the user config function returns a promise, wait for it to resolve
// before creating the webpack compiler.
Promise.resolve(serverConfig)
  .then(config => webpack(config))
  .then(serverCompiler => {
    serverCompiler.run((error, stats) => {
      if (error || stats.hasErrors()) {
        process.exitCode = 1;
      }
    })
  })
  .catch(err => {
    console.error(err);

    console.log('Build failed.');
    process.exit(1);
  });
